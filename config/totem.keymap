#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include "./totem_key_position.h"
#include "./totem_macro.h"

// Layer
#define BASE 0
#define NAVI 1
#define SYMB 2
#define NUMB 3
#define FUNC 4
#define GAME 5

/ {
  macros {
    IRONHEE_MACRO(winpv, <&macro_press &kp LCMD &kp LCTRL>, <&macro_tap &kp LEFT>, <&macro_release &kp LCMD &kp LCTRL>)
    IRONHEE_MACRO(winnx, <&macro_press &kp LCMD &kp LCTRL>, <&macro_tap &kp RIGHT>, <&macro_release &kp LCMD &kp LCTRL>)
    IRONHEE_MACRO(ppy_scr, <&macro_tap &kp KP_NUM &kp KP_NUM>)
    IRONHEE_MACRO(ppy_dpi, <&macro_tap &kp SLCK &kp SLCK>)
    IRONHEE_MACRO(ppy_rst, <&macro_tap &kp SLCK &kp SLCK &kp KP_NUM &kp KP_NUM>)
  };
  behaviors {
    // Hold Tap
    IRONHEE_HOLD_TAP(lht, &kp, &kp, R1_X R2_X R3_X LA_X LT_X) // left keys
    IRONHEE_HOLD_TAP(rht, &kp, &kp, L1_X L2_X L3_X RA_X RT_X) // right keys
    IRONHEE_HOLD_TAP(tht, &kp, &kp, L1_X L2_X L3_X LA_X LT_X R1_X R2_X R3_X RA_X RT_X) // thumb keys
    // Hold Tap (Home Row Tap Combo)
    IRONHEE_HOLD_TAP(rht_m_lpar, &kp, &m_lpar, L1_X L2_X L3_X RA_X RT_X)
    IRONHEE_HOLD_TAP(rht_m_rpar, &kp, &m_rpar, L1_X L2_X L3_X RA_X RT_X)
    // Morp Shift
    IRONHEE_MORP_SHIFT(m_comma, &kp COMMA, &kp SEMICOLON)
    IRONHEE_MORP_SHIFT(m_dot,   &kp DOT,   &kp COLON)
    IRONHEE_MORP_SHIFT(m_qmark, &kp QMARK, &kp EXCL)
    IRONHEE_MORP_SHIFT(m_lpar,  &kp LPAR,  &kp LT)
    IRONHEE_MORP_SHIFT(m_rpar,  &kp RPAR,  &kp GT)
    IRONHEE_MORP_SHIFT(m_lbkt,  &kp LBKT,  &kp LBRC)
    IRONHEE_MORP_SHIFT(m_rbkt,  &kp RBKT,  &kp RBRC)
    IRONHEE_MORP_SHIFT(m_plus,  &kp PLUS,  &kp STAR)
    IRONHEE_MORP_SHIFT(m_minus, &kp MINUS, &kp FSLH)
    IRONHEE_MORP_SHIFT(m_equal, &kp EQUAL, &kp UNDER)
  };
  combos {
    compatible = "zmk,combos";
    // Left Hand Horizontal Combo
    IRONHEE_COMBO_HORI(minus, L1_2 L1_3, &m_minus)
    IRONHEE_COMBO_HORI(plus,  L1_3 L1_4, &m_plus)
    IRONHEE_COMBO_HORI(equal, L1_2 L1_4, &m_equal)
    IRONHEE_COMBO_HORI(copy,  L3_2 L3_3, &kp LC(C))
    IRONHEE_COMBO_HORI(paste, L3_3 L3_4, &kp LC(V))
    IRONHEE_COMBO_HORI(cut,   L3_2 L3_4, &kp LC(X))
    // Right Hand Horizontal Combos
    IRONHEE_COMBO_HORI(lpar,  R2_3 R2_4, &rht_m_lpar LS(LCTRL) 0)
    IRONHEE_COMBO_HORI(rpar,  R2_2 R2_3, &rht_m_rpar LA(LCTRL) 0)
    IRONHEE_COMBO_HORI(lbkt,  R3_3 R3_4, &m_lbkt)
    IRONHEE_COMBO_HORI(rbkt,  R3_2 R3_3, &m_rbkt)
  };
  keymap {
    compatible = "zmk,keymap";
    base_layer {
      label = "BASE";
      bindings = <
        &kp Q        &kp W       &kp E          &kp R        &kp T             /*=*/ &kp Y        &kp U         &kp I        &kp O       &kp P
        &lht LCMD A  &lht LALT S &lht LCTRL D   &lht LSHFT F &kp G             /*=*/ &kp H        &rht LSHFT J  &rht LCTRL K &rht LALT L &rht LCMD APOS
        &kp Z        &kp X       &kp C          &kp V        &kp B             /*=*/ &kp N        &kp M         &m_comma     &m_dot      &m_qmark
        &tog GAME    /**/        &tht LCTRL ESC &lt NAVI TAB &tht LSHIFT SPACE /*=*/ &lt SYMB RET &lt NUMB BSPC &lt FUNC DEL /**/        &kp LANG1
      >;
    };
    navi_layer {
      label = "NAVI";
      bindings = <
        &trans   &trans    &trans    &trans    &trans   /*=*/ &kp PG_UP &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &trans
        &kp LCMD &kp LALT  &kp LCTRL &kp LSHFT &trans   /*=*/ &kp PG_DN &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT
        &ppy_scr &mkp MCLK &mkp RCLK &mkp LCLK &ppy_dpi /*=*/ &trans    &kp HOME   &winpv       &winnx       &kp END
        &trans   /**/      &trans    &trans    &trans   /*=*/ &trans    &trans     &trans       /**/         &trans
      >;
    };
    symb_layer {
      label = "SYMB";
      bindings = <
        &kp LT    &kp LBRC  &kp LPAR &kp LBKT  &kp TILDE /*=*/ &kp CARET &kp RBKT  &kp RPAR  &kp RBRC &kp GT
        &kp GRAVE &kp MINUS &kp PLUS &kp EQUAL &kp DLLR  /*=*/ &kp HASH  &kp LSHFT &kp LCTRL &kp LALT &kp LCMD
        &kp BSLH  &kp FSLH  &kp STAR &kp UNDER &kp PRCNT /*=*/ &kp AT    &kp PIPE  &kp AMPS  &trans   &trans
        &trans    /**/      &trans   &trans    &trans    /*=*/ &trans    &trans    &trans    /**/     &trans
      >;
    };
    numb_layer {
      label = "NUMB";
      bindings = <
        &trans &kp N7 &kp N8 &kp N9 &trans /*=*/ &trans &trans    &trans    &trans   &trans
        &trans &kp N4 &kp N5 &kp N6 &trans /*=*/ &trans &kp LSHFT &kp LCTRL &kp LALT &kp LCMD
        &trans &kp N1 &kp N2 &kp N3 &trans /*=*/ &trans &trans    &trans    &trans   &trans
        &trans /**/   &trans &kp N0 &trans /*=*/ &trans &trans    &trans   /**/      &trans
      >;
    };
    func_layer {
      label = "FUNC";
      bindings = <
        &kp F12 &kp F7 &kp F8 &kp F9 &kp PSCRN       /*=*/ &trans &trans    &trans    &trans   &trans
        &kp F11 &kp F4 &kp F5 &kp F6 &kp SCROLLLOCK  /*=*/ &trans &kp LSHFT &kp LCTRL &kp LALT &kp LCMD
        &kp F10 &kp F1 &kp F2 &kp F3 &kp PAUSE_BREAK /*=*/ &trans &trans    &trans    &trans   &trans
        &trans  /**/   &trans &trans &trans          /*=*/ &trans &trans    &trans    /**/     &trans
      >;
    };
    game_layer {
      label = "GAME";
      bindings = <
        &trans &trans &trans &trans &trans /*=*/ &trans &trans &trans &trans &trans
        &kp A  &kp S  &kp D  &kp F  &trans /*=*/ &trans &trans &trans &trans &trans
        &trans &trans &trans &trans &trans /*=*/ &trans &trans &trans &trans &trans
        &trans /**/   &trans &trans &trans /*=*/ &trans &trans &trans /**/   &trans
      >;
    };
  };
};